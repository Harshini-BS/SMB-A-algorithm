from queue import PriorityQueue

def a_star(graph, start, goal, heuristic):
    open_set = PriorityQueue()
    open_set.put((0, start))
    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0

    while not open_set.empty():
        current_f, current = open_set.get()

        if current == goal:
            # Reconstruct path
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]  # Reverse path

        for neighbor, cost in graph[current]:
            tentative_g = g_score[current] + cost
            if tentative_g < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g
                f = tentative_g + heuristic[neighbor]
                open_set.put((f, neighbor))

    return None

# Graph from your diagram
graph = {
    'a': [('b', 9), ('c', 4)],
    'b': [('e', 11)],
    'c': [('d', 1), ('e', 17), ('f', 12)],
    'd': [('f', 14)],
    'e': [('G', 5)],
    'f': [('G', 9)],
    'G': []
}

# Heuristic values from your image
heuristic = {
    'a': 21,
    'b': 14,
    'c': 18,
    'd': 18,
    'e': 5,
    'f': 8,
    'G': 0
}

# Run A*
path = a_star(graph, 'a', 'G', heuristic)
print("Shortest Path using A*:", path)




OUTPUT:

Shortest Path using A*: ['a', 'c', 'f', 'G']

